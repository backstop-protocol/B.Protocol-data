// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bamm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("TVL", Value.fromBigInt(BigInt.zero()));
    this.set("totalLiquidations", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bamm entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Bamm entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Bamm", id.toString(), this);
    }
  }

  static load(id: string): Bamm | null {
    return changetype<Bamm | null>(store.get("Bamm", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get TVL(): BigInt {
    let value = this.get("TVL");
    return value!.toBigInt();
  }

  set TVL(value: BigInt) {
    this.set("TVL", Value.fromBigInt(value));
  }

  get totalLiquidations(): BigInt {
    let value = this.get("totalLiquidations");
    return value!.toBigInt();
  }

  set totalLiquidations(value: BigInt) {
    this.set("totalLiquidations", Value.fromBigInt(value));
  }
}

export class StabilityPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("TVL", Value.fromBigInt(BigInt.zero()));
    this.set("totalLiquidations", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StabilityPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save StabilityPool entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("StabilityPool", id.toString(), this);
    }
  }

  static load(id: string): StabilityPool | null {
    return changetype<StabilityPool | null>(store.get("StabilityPool", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get TVL(): BigInt {
    let value = this.get("TVL");
    return value!.toBigInt();
  }

  set TVL(value: BigInt) {
    this.set("TVL", Value.fromBigInt(value));
  }

  get totalLiquidations(): BigInt {
    let value = this.get("totalLiquidations");
    return value!.toBigInt();
  }

  set totalLiquidations(value: BigInt) {
    this.set("totalLiquidations", Value.fromBigInt(value));
  }
}

export class BalanceChange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("type", Value.fromString(""));
    this.set("txHash", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BalanceChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BalanceChange entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BalanceChange", id.toString(), this);
    }
  }

  static load(id: string): BalanceChange | null {
    return changetype<BalanceChange | null>(store.get("BalanceChange", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}

export class LiquidationEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("debtAmount", Value.fromBigInt(BigInt.zero()));
    this.set("collateralAmount", Value.fromBigInt(BigInt.zero()));
    this.set("txHash", Value.fromString(""));
    this.set("blockNumber", Value.fromBigInt(BigInt.zero()));
    this.set("bammId", Value.fromString(""));
    this.set("bammTvl", Value.fromBigInt(BigInt.zero()));
    this.set("spId", Value.fromString(""));
    this.set("spTvl", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidationEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LiquidationEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LiquidationEvent", id.toString(), this);
    }
  }

  static load(id: string): LiquidationEvent | null {
    return changetype<LiquidationEvent | null>(
      store.get("LiquidationEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get debtAmount(): BigInt {
    let value = this.get("debtAmount");
    return value!.toBigInt();
  }

  set debtAmount(value: BigInt) {
    this.set("debtAmount", Value.fromBigInt(value));
  }

  get collateralAmount(): BigInt {
    let value = this.get("collateralAmount");
    return value!.toBigInt();
  }

  set collateralAmount(value: BigInt) {
    this.set("collateralAmount", Value.fromBigInt(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get bammId(): string {
    let value = this.get("bammId");
    return value!.toString();
  }

  set bammId(value: string) {
    this.set("bammId", Value.fromString(value));
  }

  get bammTvl(): BigInt {
    let value = this.get("bammTvl");
    return value!.toBigInt();
  }

  set bammTvl(value: BigInt) {
    this.set("bammTvl", Value.fromBigInt(value));
  }

  get spId(): string {
    let value = this.get("spId");
    return value!.toString();
  }

  set spId(value: string) {
    this.set("spId", Value.fromString(value));
  }

  get spTvl(): BigInt {
    let value = this.get("spTvl");
    return value!.toBigInt();
  }

  set spTvl(value: BigInt) {
    this.set("spTvl", Value.fromBigInt(value));
  }
}
